# Query two metrics and process them with individual metric templates.
#
# The first data stream is published into the stream `gauge`, which gets processed
# by the metric template with the stream field `gauge`. Additionally, the
# published `prometheus_name` label is used to build the Prometheus metric name
# `catchpoint_failures_total:24h`.
#
# The second data stream does not explicitely publish to a stream. Those metrics
# will be processed by a metric template with no stream field or with the stream
# field `default`. This template does not declare any specific name for the
# Prometheus metric, therefore it defaults to the SignalFX metric name
# `catchpoint_counterrequests` (invalid characters are replaced by underscore).
sfx:
  token: xxx
flows:
- name: catchpoint-data
  query: |
    data('catchpoint.counterfailedrequests'). \
        sum(by=['sf_metric', 'cp_testname']).sum(over='24h'). \
        publish("gauge", prometheus_name="catchpoint_failures_total:24h")
    data('catchpoint.counterrequests').publish()
  prometheusMetricTemplates:
  - stream: gauge
    type: gauge
    name: "{{ .SignalFxLabels.prometheus_name }}"
    labels:
      probe: '{{ .SignalFxLabels.cp_testname }}'
  - type: counter
    labels:
      probe: '{{ .SignalFxLabels.cp_testname }}'
